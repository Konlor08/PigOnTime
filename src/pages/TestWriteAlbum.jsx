import React, { useState } from "react";
import supabase from "../supabaseClient";

export default function TestWriteAlbum() {
const [log, setLog] = useState([]);
const push = (x) => setLog((s) => [String(x), ...s]);

const todayISO = () => new Date().toISOString().slice(0, 10);

const testInsert = async () => {
setLog([]);

// 1) ‡πÄ‡∏≠‡∏≤ uid ‡∏à‡∏≤‡∏Å session (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏∏‡∏î)
const { data: sess, error: eSess } = await supabase.auth.getSession();
if (eSess) return push(`‚ùå getSession: ${eSess.message}`);
const uid = sess?.session?.user?.id;
if (!uid) return push("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ session (uid) ‚Äî ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login");

push(`‚úÖ uid = ${uid}`);

// 2) ‡∏´‡∏≤ farm_id ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á AH ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
const { data: rel, error: eRel } = await supabase
.from("ah_farm_relations")
.select("farm_id, farms(id, plant, branch, house, farm_name)")
.eq("ah_id", uid) // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πá‡∏ö app_users.id == auth.uid()
.limit(1)
.maybeSingle();

if (eRel) return push(`‚ùå ah_farm_relations: ${eRel.message}`);
const farm = rel?.farms;
if (!farm?.id) return push("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)");

push(`‚úÖ farm_id = ${farm.id}`);

// 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á group_key ‡πÅ‡∏•‡∏∞ insert ‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏à‡∏£‡∏¥‡∏á
const group_key = `${todayISO()}::${farm.id}`;
push(`‚ÑπÔ∏é group_key = ${group_key}`);

const { data: inserted, error: eIns } = await supabase
.from("plan_route_albums")
.insert({
group_key,
delivery_date: todayISO(),
farm_id: farm.id,
ah_id: uid, // üî¥ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö auth.uid() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô RLS
})
.select("id, created_at")
.maybeSingle();

if (eIns) return push(`‚ùå INSERT plan_route_albums: ${eIns.message}`);

push(`‚úÖ INSERT OK: album_id=${inserted.id} at ${inserted.created_at}`);
};

const testDelete = async () => {
setLog([]);
const { data: sess } = await supabase.auth.getSession();
const uid = sess?.session?.user?.id;
if (!uid) return push("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ session (uid)");

// ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥)
const today = new Date().toISOString().slice(0, 10);
const { data: target } = await supabase
.from("plan_route_albums")
.select("id, group_key")
.like("group_key", `${today}::%`)
.eq("ah_id", uid)
.order("created_at", { ascending: false })
.limit(1)
.maybeSingle();

if (!target?.id) return push("‚ÑπÔ∏é ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ");

const { error: eDel } = await supabase
.from("plan_route_albums")
.delete()
.eq("id", target.id);

if (eDel) return push(`‚ùå DELETE: ${eDel.message}`);
push(`üßπ ‡∏•‡∏ö‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${target.group_key}`);
};

return (
<div style={{ padding: 20, fontFamily: "system-ui, sans-serif" }}>
<h2>üß™ Test: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏•‡∏á plan_route_albums</h2>
<div style={{ display: "flex", gap: 8, margin: "12px 0" }}>
<button onClick={testInsert}>üíæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)</button>
<button onClick={testDelete}>üßπ ‡∏•‡∏ö‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</button>
</div>
<pre
style={{
marginTop: 12,
padding: 12,
background: "#f6f7f8",
border: "1px solid #ddd",
borderRadius: 8,
maxWidth: 800,
whiteSpace: "pre-wrap",
}}
>
{log.join("\n")}
</pre>
</div>
);
}
